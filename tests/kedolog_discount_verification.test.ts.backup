import * as anchor from "@coral-xyz/anchor";
import { Program, BN } from "@coral-xyz/anchor";
import { KedolikCpSwap } from "../target/types/kedolik_cp_swap";
import {
  Keypair,
  PublicKey,
} from "@solana/web3.js";
import {
  TOKEN_PROGRAM_ID,
  createMint,
  createAssociatedTokenAccount,
  mintTo,
  getAccount,
  getAssociatedTokenAddressSync,
} from "@solana/spl-token";
import {
  setupDepositTest,
  createProtocolTokenConfig,
  swapBaseInputWithProtocolToken,
  swap_base_input,
} from "./utils/instruction";
import { getProtocolTokenConfigAddress } from "./utils/pda";
import { assert } from "chai";

describe("🔍 KEDOLOG Discount Verification - Precise Fee Testing", () => {
  anchor.setProvider(anchor.AnchorProvider.env());
  const admin = anchor.Wallet.local().payer;
  const program = anchor.workspace.KedolikCpSwap as Program<KedolikCpSwap>;
  const connection = anchor.getProvider().connection;

  let protocolTokenMint: PublicKey;
  let treasuryKeypair: Keypair;
  let treasuryTokenAccount: PublicKey;
  let userProtocolTokenAccount: PublicKey;
  let configAddress: PublicKey;
  let token0: PublicKey;
  let token1: PublicKey;
  let token0Program: PublicKey;
  let token1Program: PublicKey;
  let poolAddress: PublicKey;

  const confirmOptions = {
    skipPreflight: true,
  };

  before(async () => {
    console.log("\n" + "=".repeat(80));
    console.log("🔧 Setting up test environment...");
    console.log("=".repeat(80));

    // Create KEDOLOG token
    protocolTokenMint = await createMint(
      connection,
      admin,
      admin.publicKey,
      admin.publicKey,
      9,
      undefined,
      undefined,
      TOKEN_PROGRAM_ID
    );

    // Create treasury
    treasuryKeypair = Keypair.generate();
    treasuryTokenAccount = await createAssociatedTokenAccount(
      connection,
      admin,
      protocolTokenMint,
      treasuryKeypair.publicKey,
      undefined,
      TOKEN_PROGRAM_ID
    );

    // Create protocol token config
    const discountRate = new BN(2000); // 20% discount
    const protocolTokenPerUsd = new BN(10_000_000); // 10 KEDOLOG per 1 USD

    await createProtocolTokenConfig(
      program,
      connection,
      admin,
      protocolTokenMint,
      discountRate,
      admin.publicKey,
      treasuryKeypair.publicKey,
      protocolTokenPerUsd,
      confirmOptions
    );

    // Create a LARGE pool to minimize slippage
    // Using 1,000,000 tokens on each side
    const depositResult = await setupDepositTest(
      program,
      connection,
      admin,
      {
        config_index: 2, // Use index 2 to avoid conflicts
        tradeFeeRate: new BN(2500), // 0.25% fee
        protocolFeeRate: new BN(200000), // 20% of trade fee = 0.05%
        fundFeeRate: new BN(0),
        create_fee: new BN(0),
      },
      { transferFeeBasisPoints: 0, MaxFee: 0 },
      confirmOptions,
      {
        initAmount0: new BN(1000000_000000000), // 1 million tokens (9 decimals)
        initAmount1: new BN(1000000_000000000), // 1 million tokens (9 decimals)
      }
    );

    configAddress = depositResult.poolState.ammConfig;
    token0 = depositResult.poolState.token0Mint;
    token1 = depositResult.poolState.token1Mint;
    token0Program = depositResult.poolState.token0Program;
    token1Program = depositResult.poolState.token1Program;
    poolAddress = depositResult.poolAddress;

    // Create KEDOLOG account for user and mint tokens
    userProtocolTokenAccount = await createAssociatedTokenAccount(
      connection,
      admin,
      protocolTokenMint,
      admin.publicKey,
      undefined,
      TOKEN_PROGRAM_ID
    );

    await mintTo(
      connection,
      admin,
      protocolTokenMint,
      userProtocolTokenAccount,
      admin.publicKey,
      10000_000000000, // 10,000 KEDOLOG
      [],
      undefined,
      TOKEN_PROGRAM_ID
    );

    console.log("✅ Test environment ready!");
    console.log(`   Pool: ${poolAddress.toString()}`);
    console.log(`   Liquidity: 1,000,000 tokens each side`);
    console.log(`   KEDOLOG: ${protocolTokenMint.toString()}\n`);
  });

  it("📊 Test 1: Normal Swap WITHOUT KEDOLOG Discount", async () => {
    console.log("\n" + "=".repeat(80));
    console.log("📊 TEST 1: NORMAL SWAP (No Discount)");
    console.log("=".repeat(80));
    console.log("Expected: Swap 100 tokens → Receive ~99.75 tokens (0.25% fee)");
    console.log("Fee breakdown: 0.20% to LPs, 0.05% to protocol\n");

    const initialToken0 = await getAccount(
      connection,
      getAssociatedTokenAddressSync(token0, admin.publicKey, false, token0Program),
      undefined,
      token0Program
    );
    const initialToken1 = await getAccount(
      connection,
      getAssociatedTokenAddressSync(token1, admin.publicKey, false, token1Program),
      undefined,
      token1Program
    );

    console.log("📊 Initial Balances:");
    console.log(`   Token0: ${(Number(initialToken0.amount) / 1e9).toFixed(6)} tokens`);
    console.log(`   Token1: ${(Number(initialToken1.amount) / 1e9).toFixed(6)} tokens\n`);

    // Swap 100 tokens
    const amountIn = new BN(100_000000000); // 100 tokens
    const minAmountOut = new BN(1);

    console.log(`💱 Swapping: 100.000000 Token0 → Token1 (Normal swap)\n`);

    await swap_base_input(
      program,
      admin,
      configAddress,
      poolAddress,
      token0,
      token1,
      token0Program,
      token1Program,
      amountIn,
      minAmountOut,
      confirmOptions
    );

    const finalToken0 = await getAccount(
      connection,
      getAssociatedTokenAddressSync(token0, admin.publicKey, false, token0Program),
      undefined,
      token0Program
    );
    const finalToken1 = await getAccount(
      connection,
      getAssociatedTokenAddressSync(token1, admin.publicKey, false, token1Program),
      undefined,
      token1Program
    );

    const token0Spent = Number(initialToken0.amount - finalToken0.amount) / 1e9;
    const token1Received = Number(finalToken1.amount - initialToken1.amount) / 1e9;
    const effectiveFee = ((100 - token1Received) / 100) * 100;

    console.log("📊 Final Balances:");
    console.log(`   Token0: ${(Number(finalToken0.amount) / 1e9).toFixed(6)} tokens`);
    console.log(`   Token1: ${(Number(finalToken1.amount) / 1e9).toFixed(6)} tokens\n`);

    console.log("✅ Swap Results:");
    console.log(`   Token0 Spent: ${token0Spent.toFixed(6)} tokens`);
    console.log(`   Token1 Received: ${token1Received.toFixed(6)} tokens`);
    console.log(`   Effective Fee: ${effectiveFee.toFixed(4)}%`);
    console.log(`   Expected: ~99.75 tokens (0.25% fee)`);
    console.log(`   Difference: ${(token1Received - 99.75).toFixed(6)} tokens (due to slippage)\n`);

    // Verify token0 was spent
    assert.equal(token0Spent.toFixed(6), "100.000000", "Should spend exactly 100 tokens");
    
    // Verify token1 received is close to 99.75 (allowing for small slippage)
    assert.isTrue(
      token1Received > 99.70 && token1Received < 99.80,
      `Should receive ~99.75 tokens, got ${token1Received.toFixed(6)}`
    );

    console.log("=".repeat(80) + "\n");
  });

  it("🎯 Test 2: Swap WITH KEDOLOG Discount", async () => {
    console.log("\n" + "=".repeat(80));
    console.log("🎯 TEST 2: SWAP WITH KEDOLOG DISCOUNT");
    console.log("=".repeat(80));
    console.log("Expected: Swap 100 tokens → Receive ~99.80 tokens");
    console.log("Fee breakdown: 0.20% to LPs, 0.04% in KEDOLOG to protocol\n");

    const initialToken0 = await getAccount(
      connection,
      getAssociatedTokenAddressSync(token0, admin.publicKey, false, token0Program),
      undefined,
      token0Program
    );
    const initialToken1 = await getAccount(
      connection,
      getAssociatedTokenAddressSync(token1, admin.publicKey, false, token1Program),
      undefined,
      token1Program
    );
    const initialKedolog = await getAccount(
      connection,
      userProtocolTokenAccount,
      undefined,
      TOKEN_PROGRAM_ID
    );
    const initialTreasury = await getAccount(
      connection,
      treasuryTokenAccount,
      undefined,
      TOKEN_PROGRAM_ID
    );

    console.log("📊 Initial Balances:");
    console.log(`   Token0: ${(Number(initialToken0.amount) / 1e9).toFixed(6)} tokens`);
    console.log(`   Token1: ${(Number(initialToken1.amount) / 1e9).toFixed(6)} tokens`);
    console.log(`   User KEDOLOG: ${(Number(initialKedolog.amount) / 1e9).toFixed(6)} KEDOLOG`);
    console.log(`   Treasury KEDOLOG: ${(Number(initialTreasury.amount) / 1e9).toFixed(6)} KEDOLOG\n`);

    // Swap 100 tokens with KEDOLOG discount
    const amountIn = new BN(100_000000000); // 100 tokens
    const minAmountOut = new BN(1);

    console.log(`💱 Swapping: 100.000000 Token0 → Token1 (With KEDOLOG discount)\n`);

    await swapBaseInputWithProtocolToken(
      program,
      connection,
      admin,
      configAddress,
      token0,
      token1,
      token0Program,
      token1Program,
      amountIn,
      minAmountOut,
      protocolTokenMint,
      TOKEN_PROGRAM_ID,
      confirmOptions
    );

    const finalToken0 = await getAccount(
      connection,
      getAssociatedTokenAddressSync(token0, admin.publicKey, false, token0Program),
      undefined,
      token0Program
    );
    const finalToken1 = await getAccount(
      connection,
      getAssociatedTokenAddressSync(token1, admin.publicKey, false, token1Program),
      undefined,
      token1Program
    );
    const finalKedolog = await getAccount(
      connection,
      userProtocolTokenAccount,
      undefined,
      TOKEN_PROGRAM_ID
    );
    const finalTreasury = await getAccount(
      connection,
      treasuryTokenAccount,
      undefined,
      TOKEN_PROGRAM_ID
    );

    const token0Spent = Number(initialToken0.amount - finalToken0.amount) / 1e9;
    const token1Received = Number(finalToken1.amount - initialToken1.amount) / 1e9;
    const kedologSpent = Number(initialKedolog.amount - finalKedolog.amount) / 1e9;
    const kedologToTreasury = Number(finalTreasury.amount - initialTreasury.amount) / 1e9;

    console.log("📊 Final Balances:");
    console.log(`   Token0: ${(Number(finalToken0.amount) / 1e9).toFixed(6)} tokens`);
    console.log(`   Token1: ${(Number(finalToken1.amount) / 1e9).toFixed(6)} tokens`);
    console.log(`   User KEDOLOG: ${(Number(finalKedolog.amount) / 1e9).toFixed(6)} KEDOLOG`);
    console.log(`   Treasury KEDOLOG: ${(Number(finalTreasury.amount) / 1e9).toFixed(6)} KEDOLOG\n`);

    console.log("✅ Swap Results:");
    console.log(`   Token0 Spent: ${token0Spent.toFixed(6)} tokens`);
    console.log(`   Token1 Received: ${token1Received.toFixed(6)} tokens`);
    console.log(`   KEDOLOG Paid: ${kedologSpent.toFixed(6)} KEDOLOG`);
    console.log(`   Treasury Received: ${kedologToTreasury.toFixed(6)} KEDOLOG\n`);

    console.log("📐 Fee Calculation Verification:");
    console.log(`   Expected Token1: ~99.80 tokens (only 0.20% LP fee deducted)`);
    console.log(`   Actual Token1: ${token1Received.toFixed(6)} tokens`);
    console.log(`   Difference: ${(token1Received - 99.80).toFixed(6)} tokens`);
    console.log(`   `);
    console.log(`   Expected KEDOLOG: 0.04 tokens × 10 KEDOLOG/token = 0.40 KEDOLOG`);
    console.log(`   Actual KEDOLOG: ${kedologSpent.toFixed(6)} KEDOLOG`);
    console.log(`   Match: ${Math.abs(kedologSpent - 0.40) < 0.01 ? "✅ YES" : "❌ NO"}\n`);

    // Verify token0 was spent
    assert.equal(token0Spent.toFixed(6), "100.000000", "Should spend exactly 100 tokens");
    
    // Verify token1 received is close to 99.80 (allowing for small slippage)
    assert.isTrue(
      token1Received > 99.75 && token1Received < 99.85,
      `Should receive ~99.80 tokens, got ${token1Received.toFixed(6)}`
    );

    // Verify KEDOLOG payment
    assert.isTrue(
      Math.abs(kedologSpent - 0.40) < 0.01,
      `Should pay ~0.40 KEDOLOG, paid ${kedologSpent.toFixed(6)}`
    );

    // Verify treasury received the KEDOLOG
    assert.equal(
      kedologSpent.toFixed(6),
      kedologToTreasury.toFixed(6),
      "Treasury should receive exactly what user paid"
    );

    console.log("=".repeat(80) + "\n");
  });

  it("📈 Test 3: Compare Normal vs Discount Swap", async () => {
    console.log("\n" + "=".repeat(80));
    console.log("📈 TEST 3: COMPARISON");
    console.log("=".repeat(80));
    console.log("\nThis test demonstrates the benefit of using KEDOLOG discount:\n");
    console.log("Normal Swap (0.25% total fee):");
    console.log("  - Input: 100 tokens");
    console.log("  - Output: ~99.75 tokens");
    console.log("  - Fee: 0.25 tokens (0.20% LP + 0.05% protocol)\n");
    console.log("KEDOLOG Discount Swap (0.20% in swap + 0.04% in KEDOLOG):");
    console.log("  - Input: 100 tokens");
    console.log("  - Output: ~99.80 tokens");
    console.log("  - Fee: 0.20 tokens to LP + 0.40 KEDOLOG to protocol");
    console.log("  - Benefit: User gets 0.05 more tokens!\n");
    console.log("💡 The discount works because:");
    console.log("  1. LP fee (0.20%) is always deducted from swap");
    console.log("  2. Protocol fee (0.05%) is NOT deducted when using KEDOLOG");
    console.log("  3. Instead, user pays 0.04% equivalent in KEDOLOG (20% discount)");
    console.log("  4. Net result: User receives 99.80 instead of 99.75 tokens\n");
    console.log("=".repeat(80) + "\n");
  });
});

